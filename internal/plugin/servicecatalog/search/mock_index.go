// Code generated by MockGen. DO NOT EDIT.
// Source: index.go
//
// Generated by this command:
//
//	mockgen -source=index.go -destination=mock_index.go -package=search Index
//

// Package search is a generated GoMock package.
package search

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIndex is a mock of Index interface.
type MockIndex struct {
	ctrl     *gomock.Controller
	recorder *MockIndexMockRecorder
	isgomock struct{}
}

// MockIndexMockRecorder is the mock recorder for MockIndex.
type MockIndexMockRecorder struct {
	mock *MockIndex
}

// NewMockIndex creates a new mock instance.
func NewMockIndex(ctrl *gomock.Controller) *MockIndex {
	mock := &MockIndex{ctrl: ctrl}
	mock.recorder = &MockIndexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndex) EXPECT() *MockIndexMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockIndex) Search(ctx context.Context, keyword string, limit int) Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, keyword, limit)
	ret0, _ := ret[0].(Result)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockIndexMockRecorder) Search(ctx, keyword, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIndex)(nil).Search), ctx, keyword, limit)
}
