// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=mock_cataloger.go -package=catalogrepo Cataloger
//

// Package catalogrepo is a generated GoMock package.
package catalogrepo

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCataloger is a mock of Cataloger interface.
type MockCataloger struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogerMockRecorder
	isgomock struct{}
}

// MockCatalogerMockRecorder is the mock recorder for MockCataloger.
type MockCatalogerMockRecorder struct {
	mock *MockCataloger
}

// NewMockCataloger creates a new mock instance.
func NewMockCataloger(ctrl *gomock.Controller) *MockCataloger {
	mock := &MockCataloger{ctrl: ctrl}
	mock.recorder = &MockCatalogerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCataloger) EXPECT() *MockCatalogerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCataloger) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCatalogerMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCataloger)(nil).Close), ctx)
}

// GetInterfaceOnID mocks base method.
func (m *MockCataloger) GetInterfaceOnID(ctx context.Context, id string) (Interface, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterfaceOnID", ctx, id)
	ret0, _ := ret[0].(Interface)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInterfaceOnID indicates an expected call of GetInterfaceOnID.
func (mr *MockCatalogerMockRecorder) GetInterfaceOnID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterfaceOnID", reflect.TypeOf((*MockCataloger)(nil).GetInterfaceOnID), ctx, id)
}

// GetModuleOnID mocks base method.
func (m *MockCataloger) GetModuleOnID(ctx context.Context, id string) (Module, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleOnID", ctx, id)
	ret0, _ := ret[0].(Module)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModuleOnID indicates an expected call of GetModuleOnID.
func (mr *MockCatalogerMockRecorder) GetModuleOnID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleOnID", reflect.TypeOf((*MockCataloger)(nil).GetModuleOnID), ctx, id)
}

// ListDatabaseConsumers mocks base method.
func (m *MockCataloger) ListDatabaseConsumers(ctx context.Context, id string) ([]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabaseConsumers", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDatabaseConsumers indicates an expected call of ListDatabaseConsumers.
func (mr *MockCatalogerMockRecorder) ListDatabaseConsumers(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabaseConsumers", reflect.TypeOf((*MockCataloger)(nil).ListDatabaseConsumers), ctx, id)
}

// ListDatabases mocks base method.
func (m *MockCataloger) ListDatabases(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatabases", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatabases indicates an expected call of ListDatabases.
func (mr *MockCatalogerMockRecorder) ListDatabases(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatabases", reflect.TypeOf((*MockCataloger)(nil).ListDatabases), ctx)
}

// ListFlows mocks base method.
func (m *MockCataloger) ListFlows(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFlows", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFlows indicates an expected call of ListFlows.
func (mr *MockCatalogerMockRecorder) ListFlows(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFlows", reflect.TypeOf((*MockCataloger)(nil).ListFlows), ctx)
}

// ListInterfaceConsumers mocks base method.
func (m *MockCataloger) ListInterfaceConsumers(ctx context.Context, id string) ([]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInterfaceConsumers", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInterfaceConsumers indicates an expected call of ListInterfaceConsumers.
func (mr *MockCatalogerMockRecorder) ListInterfaceConsumers(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInterfaceConsumers", reflect.TypeOf((*MockCataloger)(nil).ListInterfaceConsumers), ctx, id)
}

// ListInterfaces mocks base method.
func (m *MockCataloger) ListInterfaces(ctx context.Context, keyword string) ([]Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInterfaces", ctx, keyword)
	ret0, _ := ret[0].([]Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInterfaces indicates an expected call of ListInterfaces.
func (mr *MockCatalogerMockRecorder) ListInterfaces(ctx, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInterfaces", reflect.TypeOf((*MockCataloger)(nil).ListInterfaces), ctx, keyword)
}

// ListInterfacesByComplexity mocks base method.
func (m *MockCataloger) ListInterfacesByComplexity(ctx context.Context, limit int) ([]Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInterfacesByComplexity", ctx, limit)
	ret0, _ := ret[0].([]Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInterfacesByComplexity indicates an expected call of ListInterfacesByComplexity.
func (mr *MockCatalogerMockRecorder) ListInterfacesByComplexity(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInterfacesByComplexity", reflect.TypeOf((*MockCataloger)(nil).ListInterfacesByComplexity), ctx, limit)
}

// ListKinds mocks base method.
func (m *MockCataloger) ListKinds(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKinds", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKinds indicates an expected call of ListKinds.
func (mr *MockCatalogerMockRecorder) ListKinds(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKinds", reflect.TypeOf((*MockCataloger)(nil).ListKinds), ctx)
}

// ListModules mocks base method.
func (m *MockCataloger) ListModules(ctx context.Context, keyword string) ([]Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModules", ctx, keyword)
	ret0, _ := ret[0].([]Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModules indicates an expected call of ListModules.
func (mr *MockCatalogerMockRecorder) ListModules(ctx, keyword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModules", reflect.TypeOf((*MockCataloger)(nil).ListModules), ctx, keyword)
}

// ListModulesByCompexity mocks base method.
func (m *MockCataloger) ListModulesByCompexity(ctx context.Context, limit int) ([]Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModulesByCompexity", ctx, limit)
	ret0, _ := ret[0].([]Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModulesByCompexity indicates an expected call of ListModulesByCompexity.
func (mr *MockCatalogerMockRecorder) ListModulesByCompexity(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModulesByCompexity", reflect.TypeOf((*MockCataloger)(nil).ListModulesByCompexity), ctx, limit)
}

// ListModulesOfTeam mocks base method.
func (m *MockCataloger) ListModulesOfTeam(ctx context.Context, id string) ([]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModulesOfTeam", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModulesOfTeam indicates an expected call of ListModulesOfTeam.
func (mr *MockCatalogerMockRecorder) ListModulesOfTeam(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModulesOfTeam", reflect.TypeOf((*MockCataloger)(nil).ListModulesOfTeam), ctx, id)
}

// ListModulesWithKind mocks base method.
func (m *MockCataloger) ListModulesWithKind(ctx context.Context, id string) ([]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModulesWithKind", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListModulesWithKind indicates an expected call of ListModulesWithKind.
func (mr *MockCatalogerMockRecorder) ListModulesWithKind(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModulesWithKind", reflect.TypeOf((*MockCataloger)(nil).ListModulesWithKind), ctx, id)
}

// ListParticpantsOfFlow mocks base method.
func (m *MockCataloger) ListParticpantsOfFlow(ctx context.Context, id string) ([]string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListParticpantsOfFlow", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListParticpantsOfFlow indicates an expected call of ListParticpantsOfFlow.
func (mr *MockCatalogerMockRecorder) ListParticpantsOfFlow(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParticpantsOfFlow", reflect.TypeOf((*MockCataloger)(nil).ListParticpantsOfFlow), ctx, id)
}

// ListTeams mocks base method.
func (m *MockCataloger) ListTeams(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTeams", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTeams indicates an expected call of ListTeams.
func (mr *MockCatalogerMockRecorder) ListTeams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTeams", reflect.TypeOf((*MockCataloger)(nil).ListTeams), ctx)
}

// Open mocks base method.
func (m *MockCataloger) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockCatalogerMockRecorder) Open(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockCataloger)(nil).Open), ctx)
}
