// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSLORepo is a mock of SLORepo interface.
type MockSLORepo struct {
	ctrl     *gomock.Controller
	recorder *MockSLORepoMockRecorder
}

// MockSLORepoMockRecorder is the mock recorder for MockSLORepo.
type MockSLORepoMockRecorder struct {
	mock *MockSLORepo
}

// NewMockSLORepo creates a new mock instance.
func NewMockSLORepo(ctrl *gomock.Controller) *MockSLORepo {
	mock := &MockSLORepo{ctrl: ctrl}
	mock.recorder = &MockSLORepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSLORepo) EXPECT() *MockSLORepoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSLORepo) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSLORepoMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSLORepo)(nil).Close), ctx)
}

// GetSLOByID mocks base method.
func (m *MockSLORepo) GetSLOByID(ctx context.Context, id string) (SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSLOByID", ctx, id)
	ret0, _ := ret[0].(SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSLOByID indicates an expected call of GetSLOByID.
func (mr *MockSLORepoMockRecorder) GetSLOByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSLOByID", reflect.TypeOf((*MockSLORepo)(nil).GetSLOByID), ctx, id)
}

// ListSLOs mocks base method.
func (m *MockSLORepo) ListSLOs(ctx context.Context) ([]SLO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSLOs", ctx)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSLOs indicates an expected call of ListSLOs.
func (mr *MockSLORepoMockRecorder) ListSLOs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOs", reflect.TypeOf((*MockSLORepo)(nil).ListSLOs), ctx)
}

// ListSLOsByApplication mocks base method.
func (m *MockSLORepo) ListSLOsByApplication(ctx context.Context, id string) ([]SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSLOsByApplication", ctx, id)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSLOsByApplication indicates an expected call of ListSLOsByApplication.
func (mr *MockSLORepoMockRecorder) ListSLOsByApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOsByApplication", reflect.TypeOf((*MockSLORepo)(nil).ListSLOsByApplication), ctx, id)
}

// ListSLOsByComponent mocks base method.
func (m *MockSLORepo) ListSLOsByComponent(ctx context.Context, id string) ([]SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSLOsByComponent", ctx, id)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSLOsByComponent indicates an expected call of ListSLOsByComponent.
func (mr *MockSLORepoMockRecorder) ListSLOsByComponent(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOsByComponent", reflect.TypeOf((*MockSLORepo)(nil).ListSLOsByComponent), ctx, id)
}

// ListSLOsByMethods mocks base method.
func (m *MockSLORepo) ListSLOsByMethods(ctx context.Context, id string) ([]SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSLOsByMethods", ctx, id)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSLOsByMethods indicates an expected call of ListSLOsByMethods.
func (mr *MockSLORepoMockRecorder) ListSLOsByMethods(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOsByMethods", reflect.TypeOf((*MockSLORepo)(nil).ListSLOsByMethods), ctx, id)
}

// ListSLOsByService mocks base method.
func (m *MockSLORepo) ListSLOsByService(ctx context.Context, id string) ([]SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSLOsByService", ctx, id)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSLOsByService indicates an expected call of ListSLOsByService.
func (mr *MockSLORepoMockRecorder) ListSLOsByService(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOsByService", reflect.TypeOf((*MockSLORepo)(nil).ListSLOsByService), ctx, id)
}

// ListSLOsByTeam mocks base method.
func (m *MockSLORepo) ListSLOsByTeam(ctx context.Context, id string) ([]SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSLOsByTeam", ctx, id)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSLOsByTeam indicates an expected call of ListSLOsByTeam.
func (mr *MockSLORepoMockRecorder) ListSLOsByTeam(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSLOsByTeam", reflect.TypeOf((*MockSLORepo)(nil).ListSLOsByTeam), ctx, id)
}

// Open mocks base method.
func (m *MockSLORepo) Open(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockSLORepoMockRecorder) Open(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockSLORepo)(nil).Open), ctx)
}

// SearchSLOs mocks base method.
func (m *MockSLORepo) SearchSLOs(ctx context.Context, category, keyword string) ([]SLO, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSLOs", ctx, category, keyword)
	ret0, _ := ret[0].([]SLO)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchSLOs indicates an expected call of SearchSLOs.
func (mr *MockSLORepoMockRecorder) SearchSLOs(ctx, category, keyword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSLOs", reflect.TypeOf((*MockSLORepo)(nil).SearchSLOs), ctx, category, keyword)
}
